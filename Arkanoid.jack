class Arkanoid {
    
    field Platform platform;
    field Array balls;
    field boolean gameOver;
    field boolean gameWon;
    field boolean gameLost;
    field Array bricksArray;
    field int ballsCount;
    field int bricksCount;
    field int partToIncreaseSpeed;
    field int direction;
    field int seed;

    constructor Arkanoid new() {
        do Random.setSeed(1);
        do Screen.setColor(true);
        let direction = 0;
        let platform = Platform.new(50, 10);
        do Bonus.setupBonuses();
        do setupLevel();
        let balls = Array.new(4);
        let balls[0] = Ball.new(7, platform, bricksArray, bricksCount);
        let ballsCount = 1;
        let partToIncreaseSpeed = bricksCount / 3;
        return this;
    }

    method void dispose() {
        do disposeBalls();
        do platform.dispose();
        do disposeBricks();
        do Memory.deAlloc(this);
        return;
    }

    method void disposeBalls() {
        var int counter;
        var Ball ball;
        while (~(counter = ballsCount)) {
            let ball = balls[counter];
            do ball.dispose();
            let counter = counter + 1;
        }
        return;
    }

    method void disposeBricks() {
        var int counter;
        var Brick brick;
        while (~(counter = bricksCount)) {
            let brick = bricksArray[counter];
            do brick.dispose();
            let counter = counter + 1;
        }
        return;
    }

    method void applyBonuses() {
        do BonusBroker.applyPlatformBonuses(platform);
        do BonusBroker.applyArkanoidBonuses(this);
        return;
    }

    method void addBall() {
        var Ball ball;
        if (ballsCount = 3) {
            return;
        }
        let ball = Ball.new(7, platform, bricksArray, bricksCount);
        let balls[ballsCount] = ball;
        do ball.allowMove();
        let ballsCount = ballsCount + 1;
        return;
    }

    method void update() {
        do movePlatform();
        do moveBalls();
        do updateBrickArray();
        do applyBonuses();
        if (checkBallsFallen()) {
            let gameOver = true;
            let gameLost = true;
            return;
        }
        do Sys.wait(5);
        return;
    }

    method void moveBalls() {
        var Ball ball;
        var int counter;
        while (~(counter = ballsCount)) {
            let ball = balls[counter];
            do ball.move();
            let counter = counter + 1;
        }
        return;
    }

    method void updateBallsSpeed(int speedApplier) {
        var Ball ball;
        var int counter;
        while (~(counter = ballsCount)) {
            let ball = balls[counter];
            do ball.applySpeed(speedApplier);
            let counter = counter + 1;
        }
        return;
    }

    method boolean checkBallsFallen() {
        var Ball ballCur, ballLast;
        var boolean isFallen;
        var int counter;
        while (counter < ballsCount) {
            let ballCur = balls[counter];
            let isFallen = ballCur.checkIsFallen();
            if (isFallen) {
                let ballLast = balls[ballsCount - 1];
                let balls[counter] = ballLast;
                do ballCur.erase();
                let ballsCount = ballsCount - 1;
            }
            let counter = counter + 1;
        }
        return (ballsCount = 0);
    }

    method void setGameLost() {
        let gameOver = true;
        let gameLost = true;
        return;
    }

    method void updateBrickArray() {
        var Brick brick;
        var int counter, destroyedBlocks, speedApplier;
        while (~(counter = bricksCount)) {
            let brick = bricksArray[counter];
            do brick.update();
            let counter = counter + 1;
            if (brick.gotDestroyed()) {
                let destroyedBlocks = destroyedBlocks + 1;
            }
        }
        let speedApplier = destroyedBlocks / partToIncreaseSpeed + 1;
        do updateBallsSpeed(speedApplier);
        if (destroyedBlocks = bricksCount) {
            let gameOver = true;
            let gameWon = true;
        }
        return;
    }

    method void showGameResult() {
        if (gameLost) {
            do Helper.output("Better luck next time! Press any key to quit...");
        }
        if (gameWon) {
            do Helper.output("Nice job! You can try other levels.");
        }
        do Keyboard.readChar();
        do Screen.clearScreen();
        return;
    }

    method void setupLevel() {
        var int seed, level;
        do Output.moveCursor(15, 10);
        let seed = Keyboard.readInt("Seed: ");
        do Random.setSeed(seed);
        let level = Random.range(1, 3);
        let bricksArray = LevelCreator.getLevel(level, platform);
        let bricksCount = LevelCreator.getLevelCount(level);
        return;
    }

    method void run() {
        var boolean hasStarted;
        var char key;
        var Ball ball;
        do Helper.output("Press ENTER to start!");
        while (~gameOver) {
            while ((key = 0) & (~gameOver)) {
                let direction = 0;
                let key = Keyboard.keyPressed();
                do update();
            }
            if (key = 128 & ~hasStarted) {
                let hasStarted = true;
                do Screen.clearScreen();
                let ball = balls[0];
                do ball.allowMove();
            }
            if (key = 81 & hasStarted) {
                let gameOver = true; 
            }
            if (key = 65 & hasStarted) {
                let direction = 1;
            }
            if (key = 68 & hasStarted) {
                let direction = 2;
            }
            while (~(key = 0) & (~gameOver)) {
                let key = Keyboard.keyPressed();
                do update();
            }
        }
        do Screen.clearScreen();
        do showGameResult();
        return;
    }

    method void movePlatform() {
        if (direction = 0) {
            do platform.draw();
        }
        if (direction = 1) {
            do platform.moveLeft();
        }
        if (direction = 2) {
            do platform.moveRight();
        }
        return;
    }
}
